#!/usr/bin/python3

import os
import sys
from pathlib import Path

from extract import get_doc_extracts
from extract import get_token_impl_map
from extract import get_namespace
from files import dump_yaml
from files import walk_implementations
from files import walk_indices
from transform import transform_extract


def main():
    arg = sys.argv[-1]

    if arg == 'help':
        print('Generate stdlib documentation')
        return

    stdlib_path = arg
    stdlib_path = os.path.abspath(stdlib_path)

    token_impl_map = {}
    representations = {}
    namespaces = {}
    modules = {}

    # Extract the names of methods from lib.go
    for file in walk_indices(stdlib_path):
        for token in get_token_impl_map(file):
            token_impl_map.update(**token)

        # Extracting namespaces based on file
        for namespace in get_namespace(file):
            p = Path(file)

            package_path = os.path.dirname(p.relative_to(stdlib_path))
            parent_package_path = p.parents[1].relative_to(stdlib_path).as_posix()

            if parent_package_path in namespaces:
                parent_namespace = namespaces[parent_package_path]
                namespaces[package_path] = parent_namespace + "::" + namespace
            else:
                namespaces[package_path] = namespace

    # Extract the documentation data
    for file in walk_implementations(stdlib_path):
        for extract in get_doc_extracts(file, stdlib_path, token_impl_map):
            package = extract.token_package

            if not representations.get(package):
                representations[package] = []

            representations[package].append({
                'token': extract.token_name,
                'file_name': extract.file_name,
                'line_number': extract.line_number,
                'doc': transform_extract(extract),
            })

    for name in sorted(representations.keys()):
        namespace = ""

        if name in namespaces:
            namespace = namespaces[name]

        modules[name] = {
            'name': name,
            'namespace': namespace,
            'functions': sorted(representations[name], key=lambda i: i['token']),
        }

    dump_yaml({
        'modules': modules
    }, 'stdlib-docs-rep.yaml')


if __name__ == '__main__':
    main()
